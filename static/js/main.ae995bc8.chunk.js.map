{"version":3,"sources":["pages/Home.js","components/Header.js","router/MainRouter.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Home","react_default","a","createElement","Component","styles","root","flexGrow","grow","menuButton","marginLeft","marginRight","Header","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","Button_default","style","right","MainRouter","Header_Header","Route","exact","path","component","App","BrowserRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wMAaeA,gMARX,OACIC,EAAAC,EAAAC,cAAA,yBAHWC,oHCObC,EAAS,CACXC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,GAEZE,WAAY,CACVC,YAAa,GACbC,YAAa,KAIEC,mLAEb,OACIX,EAAAC,EAAAC,cAAA,OAAKU,UAAWR,EAAOC,MACnBL,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAQa,SAAS,UACjBd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,KACID,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAYW,UAAWR,EAAOI,WAAYS,MAAM,UAAUC,aAAW,QACrElB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,OAEAD,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAYoB,QAAQ,KAAKJ,MAAM,UAAUL,UAAWR,EAAOG,MAA3D,8CAGAP,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAQsB,MAAO,CAACT,SAAU,WAAYU,MAAO,IAAKP,MAAM,WAAxD,mBAZgBd,aCNrBsB,mLATX,OACIzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,YALpBI,aCYV4B,mLARX,OACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOG,UAAWL,YAJRtB,aCIE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ae995bc8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Home extends Component {\n  render() {\n    return (\n        <div>\n            LEL\n        </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = {\n    root: {\n      flexGrow: 1,\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginLeft: -12,\n      marginRight: 20,\n    },\n  };\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <div className={styles.root}>\n                <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton className={styles.menuButton} color=\"inherit\" aria-label=\"Menu\">\n                    <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" color=\"inherit\" className={styles.grow}>\n                     Главная\n                    </Typography>\n                    <Button style={{position: \"absolute\", right: 16}} color=\"inherit\">Login</Button>\n                </Toolbar>\n                </AppBar>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Home from '../pages/Home'\nimport Header from '../components/Header'\n\nclass MainRouter extends Component {\n  render() {\n    return (\n        <div>\n            <Header/>\n            <Route exact path=\"/\" component={Home} />\n        </div>\n    );\n  }\n}\n\nexport default MainRouter;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport MainRouter from './router/MainRouter'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route component={MainRouter} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}